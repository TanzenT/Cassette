apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

ext {
    supportLibVersion = '27.1.1'
}

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.3'


    defaultConfig {
        applicationId "tanzent.cassette"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 107
        versionName "1.9.1_HF"

        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true
        ndk {
//            abiFilters 'armeabi-v7a'
            abiFilters 'armeabi-v7a', 'x86'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        multiDexEnabled true
     }

    signingConfigs {
        debug {
            storeFile file("KEY_PATH_HERE")
            storePassword "STORE_PASSWORD_HERE"
            keyAlias "KEY_ALIAS_HERE"
            keyPassword "KEY_PASSWORD_HERE"
        }
        release {
            storeFile file("KEY_PATH_HERE")
            storePassword "STORE_PASSWORD_HERE"
            keyAlias "KEY_ALIAS_HERE"
            keyPassword "KEY_PASSWORD_HERE"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            debuggable true
            minifyEnabled false
        }
        release {
            //混淆代码
            //minifyEnabled
            debuggable false
            zipAlignEnabled false
            shrinkResources false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            jniDebuggable false
            renderscriptDebuggable false
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Cassette_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_${releaseTime()}.apk"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    androidExtensions {
        experimental = true
    }

    productFlavors {
//        tencent{}
//        alibaba{}
//        meizu{}
//        assistant91{}
//        baidu{}
//        anzhuomarket{}
//        chuizi {}
//        qihu360 {}

        xiaomi {}
        kuan {}
        google {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
        disable 'InvalidPackage'
    }

//    packagingOptions {
//        exclude 'META-INF/rxjava.properties'
//    }

//    configurations {
//        implementation.exclude module: 'okio'
//        implementation.exclude module: 'gson'
//    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "$supportLibVersion"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'

    //support
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:palette-v7:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation 'com.android.support:multidex:1.0.3'

    //fresco
    implementation 'com.remix.fresco:fresco:1.10.2'

    //materialDialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'

    //rxpermission
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    //kotlin
    implementation 'org.jetbrains.anko:anko-common:0.10.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //leakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    //butterKnife
    implementation 'com.jakewharton:butterknife:9.0.0'
    kapt 'com.jakewharton:butterknife-compiler:9.0.0'

    //bugly
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'

    //room
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version" // use kapt for Kotlin
    implementation "android.arch.persistence.room:rxjava2:$room_version"

    //rxlife
//    implementation 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-android:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-kotlin:3.0.0'

    //timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //other
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'
    implementation 'com.github.promeg:tinypinyin:2.0.1'

}

def releaseTime() {
    return new Date().format("yyyy-MM-dd HH-mm")
}

def getProperties(String fileName) {
    final def Properties properties = new Properties()
    def file = file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    }
    return properties
}

def getProperty(Properties properties, String name) {
    return properties.getProperty(name) ?: "$name missing"
}

kapt {
    generateStubs = true
}

